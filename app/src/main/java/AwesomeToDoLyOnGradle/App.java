/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package AwesomeToDoLyOnGradle;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class App {
    private static Scanner scanner = new Scanner(System.in);
    private static YourList list0 = new YourList();

    public static void main(String[] args) {
        boolean quit = false;
        startApp();
        System.out.println("\n");
        viewAllOptions();
        while (!quit) {
            System.out.println("\nOk, now enter an option number (or enter 5 and view all available options again):");
            int option = scanner.nextInt();
            scanner.nextLine();

            switch (option) {
                case 1:
                    list0.viewTaskList(); // calls a method from class List0, applied on object list0 (made here, in Main class)
                    break;

                case 2:
                    addNewTask();
                    break;

                case 3:
                    editExistingTask();
                    break;

                case 4:
                    removeExistingTask();
                    break;

                case 5:
                    viewAllOptions();
                    break;

                case 6:
                    System.out.println("\nSee you next time! Your ToDoLy is shutting down..."); //doesnÂ´t really shut down :)
                    //saveAndQuit();
                    break;

                default:
                    System.out.println("Invalid entry, just try again!");
            }
        }

        System.exit(0);

    }

    private static void addNewTask() {
        System.out.println("Please, give a name to a project to which your task will belong to: ");
        String project = scanner.nextLine();
        System.out.println("Please, enter a task title: ");
        String title = scanner.nextLine();
        System.out.println("Please, enter your task description (what you need to do: )");
        String taskBody = scanner.nextLine();

        Task newTask = new Task(); // a new task object is created
        newTask.Task(project, title, taskBody);
        if(list0.addNewTask(newTask)) { //checking if a task is successfully added
            System.out.println("Awesome! A new task is added in a project " + project
                    + ": \nTask title: " + title
                    + "\nWhat to do: " + taskBody);
        } else {
            System.out.println("Cannot add, " + title + "as it already exists for another task." );
        }
    }

    private static void editExistingTask() {
        System.out.println("Enter an existing task title: ");
        String title = scanner.nextLine();
        Task existingTaskRecord = list0.queryTask(title);
        if (existingTaskRecord == null) {
            System.out.println("Ooops, a task was not found.");
            return;
        }

        System.out.println("Enter a new project name for your task to replace the old one: ");
        String newProject = scanner.nextLine();
        System.out.println("Enter a new title for your task to replace the old one: ");
        String newTitle = scanner.nextLine();
        System.out.println("Give a new description to your task to replace the old one: ");
        String newTaskBody = scanner.nextLine();

        Task newTask = new Task();
        newTask.Task(newProject, newTitle, newTaskBody);
        if (list0.updateExistingTask(existingTaskRecord, newTask)) {
            System.out.println("Your task was successfully updated.");
        } else {
            System.out.println("An error occurred while updating your task.");
        }
    }

    //Looking for a task by title works but is cumbersome (as titles can be hard to remember or reproduce)
    private static void removeExistingTask() {
        System.out.println("Enter an existing task title: ");
        String title = scanner.nextLine();
        Task existingTaskRecord = list0.queryTask(title);
        if (existingTaskRecord == null) {
            System.out.println("Ooops, a task was not found.");
            return;
        }

        if (list0.removeExistingTask(existingTaskRecord)) {
            System.out.println("Your task was successfully removed.");
        } else {
            System.out.println("An error occurred while removing your task.");
        }
    }

    private static void startApp() {
        System.out.println("Your ToDoLy is starting...");

    }

    private static void viewAllOptions() {
        System.out.println("" + "Welcome to ToDoLy.\n"
                + "You have X tasks to do and Y tasks are done!\n"
                + "\n"
                + "Here is a list of options:\n");
        System.out.println ("(1) View Task List\n" //1 display. In IP specs: by project or by due date
                + "(2) Add New Task\n" //2 add
                + "(3) Edit Existing Task\n" // 3 update existing; 4 remove
                + "(4) Remove Existing Task\n"
                + "(5) View all available options\n" // 6 print available options
                + "(6) Save and Quit"); //0 shutdown. In IP specs: not only quit, but save to file

    }


    //Additional method (not required in IP specs) for searching a task by its title
    private static void queryTask() {
        System.out.println("Enter an existing task title: ");
        String title = scanner.nextLine();
        Task existingTaskRecord = list0.queryTask(title);
        if (existingTaskRecord == null) {
            System.out.println("Ooops, a task was not found.");
            return;
        }
        System.out.println("Task with a title " + existingTaskRecord.getTitle()
                + "belongs to a project " + existingTaskRecord.getProject() + "."
                + "\n Task description: " + existingTaskRecord.getTaskBody());

    }
}
